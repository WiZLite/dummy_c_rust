struct Vector2 {
  x: i32,
  y: i32,
}

struct Vec<T> {
  capacity: i32,
  size: i32,
  buf: *T,
}

fn g_malloc<T>(size: usize) : *T {
  let mem_size = (* size (sizeof T))
  let result: *T = (malloc mem_size)
  result
}

fn vec<T>(): Vec<T> {
  Vec<T> {
    capacity: 100,
    size: 50,
    buf: (g_malloc<T> 4)
  }
}

fn set<T>(vec: Vec<T>, index: usize, value: T): void {
  let buf = vec.buf
  buf[index] = value
}

fn get<T>(vec: Vec<T>, index: usize): T {
  let buf = vec.buf
  buf[index]
}

fn add(l: i32, r: i32): i32 {
  (+ l r)
}

fn print-i32(n: i32): void {
  (printf "%d\n" n)
}

fn main(): void {
  (print-i32 10)
  let v2 = Vector2 { x: 10, y: 20 }
  let vv2: Vec<Vector2> = (vec)
  (set<Vector2> vv2 0 v2)
  let v2_2 = (get<Vector2> vv2 0)
  (printf "%d, %d\n" v2_2.x v2_2.y)
}
